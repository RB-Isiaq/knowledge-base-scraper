{
  "info": {
    "name": "Web Scraper API",
    "description": "A powerful web scraping API for extracting content from blogs, websites, and PDFs.\n\n## Features\n- Single URL scraping with automatic content detection\n- Bulk URL processing with concurrency control  \n- PDF processing with intelligent chunking\n- Markdown output format\n- Rate limiting and validation\n\n## Base URL\n- Development: `http://localhost:3001`\n- Production: `https://api.yourapp.com`\n\n## Rate Limits\n- 100 requests per 15 minutes per IP\n- Maximum 10 URLs per bulk request\n- Maximum 50MB file upload",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "teamId",
      "value": "aline123",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "user123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Info",
      "description": "Health check and system information endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Returns the current health status of the API server including uptime, memory usage, and system information."
          },
          "response": [
            {
              "name": "Healthy Server",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": ["{{baseUrl}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"OK\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"uptime\": 3600,\n  \"memory\": {\n    \"rss\": 45678592,\n    \"heapTotal\": 18874368,\n    \"heapUsed\": 12345678,\n    \"external\": 1234567\n  },\n  \"version\": \"v18.17.0\"\n}"
            }
          ]
        },
        {
          "name": "API Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Returns basic information about the API and available endpoints."
          },
          "response": [
            {
              "name": "API Info",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/",
                  "host": ["{{baseUrl}}"],
                  "path": [""]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"message\": \"Web Scraper API\",\n  \"version\": \"1.0.0\",\n  \"endpoints\": {\n    \"POST /api/scrape-url\": \"Scrape a single URL\",\n    \"POST /api/scrape-bulk\": \"Scrape multiple URLs\",\n    \"POST /api/scrape-pdf\": \"Process PDF file\",\n    \"GET /health\": \"Health check\"\n  },\n  \"documentation\": \"/api-docs\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Content Scraping",
      "description": "Endpoints for scraping content from various sources",
      "item": [
        {
          "name": "Scrape Single URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"url\": \"https://interviewing.io/blog\",\n  \"team_id\": \"{{teamId}}\",\n  \"user_id\": \"{{userId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/scrape-url",
              "host": ["{{baseUrl}}"],
              "path": ["api", "scrape-url"]
            },
            "description": "Scrapes content from a single blog or website URL. The scraper automatically detects if the URL is a blog listing page and will scrape individual articles, or if it's a single article page.\n\n**Parameters:**\n- `url` (string, required): The URL to scrape content from\n- `team_id` (string, required): Team identifier for organizing content\n- `user_id` (string, required): User identifier who initiated the scraping\n\n**Features:**\n- Automatic content detection\n- Blog listing page support\n- Markdown output format\n- Author and metadata extraction"
          },
          "response": [
            {
              "name": "Successful Scrape",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"url\": \"https://interviewing.io/blog\",\n  \"team_id\": \"aline123\",\n  \"user_id\": \"user123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/api/scrape-url",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "scrape-url"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"team_id\": \"aline123\",\n  \"items\": [\n    {\n      \"title\": \"How to Ace Technical Interviews\",\n      \"content\": \"# Introduction\\n\\nTechnical interviews can be challenging, but with the right preparation, you can succeed. This guide covers everything you need to know about preparing for and excelling in technical interviews.\\n\\n## Key Topics\\n\\n- Data structures and algorithms\\n- System design principles\\n- Behavioral questions\\n- Mock interview practice\\n\\n## Preparation Strategy\\n\\n1. **Practice coding problems daily**\\n2. **Review fundamental concepts**\\n3. **Mock interviews with peers**\\n4. **Study system design patterns**\",\n      \"content_type\": \"blog\",\n      \"source_url\": \"https://interviewing.io/blog/how-to-ace-technical-interviews\",\n      \"author\": \"Jane Smith\",\n      \"user_id\": \"user123\"\n    },\n    {\n      \"title\": \"Common Interview Mistakes to Avoid\",\n      \"content\": \"# Common Pitfalls\\n\\nMany candidates make similar mistakes during technical interviews. Here are the most common ones and how to avoid them.\\n\\n## Technical Mistakes\\n\\n- Not asking clarifying questions\\n- Jumping into coding without planning\\n- Ignoring edge cases\\n- Poor time management\\n\\n## Communication Issues\\n\\n- Not explaining thought process\\n- Being too quiet during problem solving\\n- Not asking for help when stuck\",\n      \"content_type\": \"blog\",\n      \"source_url\": \"https://interviewing.io/blog/interview-mistakes\",\n      \"author\": \"John Doe\",\n      \"user_id\": \"user123\"\n    }\n  ]\n}"
            },
            {
              "name": "Validation Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"url\": \"invalid-url\",\n  \"team_id\": \"aline123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/api/scrape-url",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "scrape-url"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"error\": \"Validation failed\",\n  \"message\": \"Invalid URL format\"\n}"
            }
          ]
        },
        {
          "name": "Scrape Multiple URLs",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"urls\": [\n    \"https://interviewing.io/blog\",\n    \"https://nilmamano.com/blog/category/dsa\",\n    \"https://quill.co/blog\"\n  ],\n  \"team_id\": \"{{teamId}}\",\n  \"user_id\": \"{{userId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/scrape-bulk",
              "host": ["{{baseUrl}}"],
              "path": ["api", "scrape-bulk"]
            },
            "description": "Scrapes content from multiple URLs in a single request. Processing is done with concurrency control to avoid overwhelming target servers.\n\n**Parameters:**\n- `urls` (array, required): Array of URLs to scrape (maximum 10)\n- `team_id` (string, required): Team identifier for organizing content\n- `user_id` (string, required): User identifier who initiated the scraping\n\n**Features:**\n- Concurrent processing with rate limiting\n- Error handling per URL\n- Batch processing optimization\n- Progress tracking\n\n**Limits:**\n- Maximum 10 URLs per request\n- 2-second delay between batches\n- Individual URL timeout: 30 seconds"
          },
          "response": [
            {
              "name": "Successful Bulk Scrape",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"urls\": [\n    \"https://interviewing.io/blog\",\n    \"https://nilmamano.com/blog/category/dsa\"\n  ],\n  \"team_id\": \"aline123\",\n  \"user_id\": \"user123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/api/scrape-bulk",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "scrape-bulk"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"team_id\": \"aline123\",\n  \"items\": [\n    {\n      \"title\": \"Dynamic Programming Fundamentals\",\n      \"content\": \"# Dynamic Programming\\n\\nDynamic programming is a method for solving complex problems by breaking them down into simpler subproblems.\\n\\n## Key Concepts\\n\\n- Overlapping subproblems\\n- Optimal substructure\\n- Memoization vs Tabulation\\n\\n## Common Patterns\\n\\n1. **Fibonacci sequence**\\n2. **Longest common subsequence**\\n3. **Knapsack problem**\\n4. **Edit distance**\",\n      \"content_type\": \"educational\",\n      \"source_url\": \"https://nilmamano.com/blog/dynamic-programming\",\n      \"author\": \"Nil Mamano\",\n      \"user_id\": \"user123\"\n    }\n  ],\n  \"errors\": [\n    \"Failed to scrape https://example-broken-url.com: Connection timeout\"\n  ]\n}"
            }
          ]
        },
        {
          "name": "Process PDF File",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "pdf",
                  "type": "file",
                  "src": "/path/to/sample.pdf",
                  "description": "PDF file to process (max 50MB)"
                },
                {
                  "key": "team_id",
                  "value": "{{teamId}}",
                  "type": "text"
                },
                {
                  "key": "user_id",
                  "value": "{{userId}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/scrape-pdf",
              "host": ["{{baseUrl}}"],
              "path": ["api", "scrape-pdf"]
            },
            "description": "Uploads and processes a PDF file, extracting text content and intelligently chunking it into sections. Automatically detects chapter boundaries when possible.\n\n**Parameters:**\n- `pdf` (file, required): PDF file to process (maximum 50MB)\n- `team_id` (string, required): Team identifier for organizing content\n- `user_id` (string, required): User identifier who initiated the processing\n\n**Features:**\n- Automatic chapter detection\n- Intelligent text chunking\n- Author extraction\n- Content cleaning and formatting\n- Metadata preservation\n\n**Processing:**\n1. Extract raw text from PDF\n2. Detect chapter boundaries\n3. Clean and format content\n4. Split into manageable chunks\n5. Extract metadata (author, title)\n\n**Supported Formats:**\n- Text-based PDFs\n- Multi-chapter documents\n- Academic papers\n- Technical documentation"
          },
          "response": [
            {
              "name": "Successful PDF Processing",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "pdf",
                      "type": "file",
                      "src": "/path/to/sample.pdf"
                    },
                    {
                      "key": "team_id",
                      "value": "aline123",
                      "type": "text"
                    },
                    {
                      "key": "user_id",
                      "value": "user123",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{baseUrl}}/api/scrape-pdf",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "scrape-pdf"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"team_id\": \"aline123\",\n  \"items\": [\n    {\n      \"title\": \"Technical-Interview-Guide.pdf - Chapter 1: Introduction\",\n      \"content\": \"# Introduction to Technical Interviews\\n\\nTechnical interviews are a crucial part of the software engineering hiring process. They assess a candidate's problem-solving abilities, coding skills, and technical knowledge.\\n\\n## What to Expect\\n\\nTechnical interviews typically include:\\n\\n- Coding challenges\\n- System design questions\\n- Behavioral questions\\n- Technical discussions\\n\\n## Preparation Strategy\\n\\nSuccessful preparation involves:\\n\\n1. **Practice coding problems** - Solve problems daily on platforms like LeetCode\\n2. **Study algorithms and data structures** - Master the fundamentals\\n3. **Mock interviews** - Practice with peers or online platforms\\n4. **System design study** - Learn scalable system patterns\",\n      \"content_type\": \"book\",\n      \"author\": \"Aline Chen\",\n      \"user_id\": \"user123\"\n    },\n    {\n      \"title\": \"Technical-Interview-Guide.pdf - Chapter 2: Data Structures\",\n      \"content\": \"# Essential Data Structures\\n\\nUnderstanding data structures is fundamental to solving technical interview problems efficiently.\\n\\n## Arrays and Strings\\n\\nArrays are the most basic data structure:\\n\\n- **Time Complexity**: O(1) access, O(n) search\\n- **Space Complexity**: O(n)\\n- **Common Operations**: Insert, delete, search, sort\\n\\n### String Manipulation\\n\\nString problems are common in interviews:\\n\\n- Pattern matching\\n- Palindrome detection\\n- Anagram checking\\n- String reversal\\n\\n## Linked Lists\\n\\nLinked lists offer dynamic memory allocation:\\n\\n- **Types**: Singly, doubly, circular\\n- **Operations**: Insert, delete, traverse\\n- **Advantages**: Dynamic size, efficient insertion/deletion\\n- **Disadvantages**: No random access, extra memory overhead\",\n      \"content_type\": \"book\",\n      \"author\": \"Aline Chen\",\n      \"user_id\": \"user123\"\n    }\n  ]\n}"
            }
          ]
        }
      ]
    }
  ]
}
